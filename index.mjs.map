{"version":3,"file":"index.mjs","sources":["../lib/sdsnanmeanors.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array, ignoring `NaN` values and using ordinary recursive summation with extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n*\n* var x = new Float32Array( [ 1.0, -2.0, NaN, 2.0 ] );\n* var N = x.length;\n*\n* var v = sdsnanmeanors( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction sdsnanmeanors( N, x, stride ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tsum = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tsum += v;\n\t\t\tn += 1;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( sum / n );\n}\n\n\n// EXPORTS //\n\nexport default sdsnanmeanors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32';\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array, ignoring `NaN` values and using ordinary recursive summation with extended accumulation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32';\n* import floor from '@stdlib/math-base-special-floor';\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0, NaN ] );\n* var N = floor( x.length / 2 );\n*\n* var v = sdsnanmeanors( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction sdsnanmeanors( N, x, stride, offset ) {\n\tvar sum;\n\tvar ix;\n\tvar v;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tsum = 0.0;\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = x[ ix ];\n\t\tif ( v === v ) {\n\t\t\tsum += v;\n\t\t\tn += 1;\n\t\t}\n\t\tix += stride;\n\t}\n\tif ( n === 0 ) {\n\t\treturn NaN;\n\t}\n\treturn float64ToFloat32( sum / n );\n}\n\n\n// EXPORTS //\n\nexport default sdsnanmeanors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport sdsnanmeanors from './sdsnanmeanors.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( sdsnanmeanors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default sdsnanmeanors;\n"],"names":["sdsnanmeanors","N","x","stride","sum","ix","v","n","i","NaN","float64ToFloat32","offset","setReadOnly","ndarray"],"mappings":";;iOA4CA,SAASA,EAAeC,EAAGC,EAAGC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAOD,EAAG,GASX,IANCG,EADIF,EAAS,GACP,EAAEF,GAAKE,EAER,EAENC,EAAM,EACNG,EAAI,EACEC,EAAI,EAAGA,EAAIP,EAAGO,KACnBF,EAAIJ,EAAGG,KACIC,IACVF,GAAOE,EACPC,GAAK,GAENF,GAAMF,EAEP,OAAW,IAANI,EACGE,IAEDC,EAAkBN,EAAMG,EAChC,CC9BA,SAASP,EAAeC,EAAGC,EAAGC,EAAQQ,GACrC,IAAIP,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKP,GAAK,EACT,OAAOQ,IAER,GAAW,IAANR,GAAsB,IAAXE,EACf,OAAOD,EAAGS,GAKX,IAHAN,EAAKM,EACLP,EAAM,EACNG,EAAI,EACEC,EAAI,EAAGA,EAAIP,EAAGO,KACnBF,EAAIJ,EAAGG,KACIC,IACVF,GAAOE,EACPC,GAAK,GAENF,GAAMF,EAEP,OAAW,IAANI,EACGE,IAEDC,EAAkBN,EAAMG,EAChC,CC7CAK,EAAAZ,EAAA,UAAAa"}